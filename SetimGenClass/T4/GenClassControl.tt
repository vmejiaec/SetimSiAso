<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".txt" #>
<#@ assembly name="Microsoft.CSharp" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ parameter name="Tabla" type="System.Object" #>
<#
	var tabla = Tabla as dynamic;
#>using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

using DotNetNuke.Common.Utilities;
using DotNetNuke.Data;
using DotNetNuke.Services.Log.EventLog;
using DotNetNuke.Services.Exceptions;

using SetimBasico;

namespace <#=tabla.NombreNamespace#>
{

    ///<summary>
    ///Controladores para los procedimientos de <#=tabla.Name#>
    ///</summary>
    public class <#=tabla.Name#>Control
    {
        LogEventos _eventos = new LogEventos();
<#foreach (var proc in tabla.ProcsSelectVariosRegistros()) 
    {#>
        public IList<<#=tabla.Name#>> <#=proc.Nombre#>(<#=proc.ParamsConTipo() #>)
        {
            return CBO.FillCollection<<#=tabla.Name#>>(DataProvider.Instance().ExecuteReader(
                "<#=proc.Name#>"
                <#=proc.ParamsSinTipoConComaInicial() #>
            ));
        }

<#  }#>
<#foreach (var proc in tabla.ProcsSelectByAll()) 
    {
        string parametros = proc.ParamsConTipo();
        parametros = parametros
            .Replace("Int32","Int32?")
            .Replace("DateTime","DateTime?")
            .Replace("Decimal","Decimal?");
        parametros = parametros
            .Replace("Int32? PageIndex","Int32 PageIndex")
            .Replace("Int32? PageSize","Int32 PageSize");
#>
        public IList<<#=tabla.Name#>> <#=proc.Nombre#>(<#=parametros #>)
        {
            return CBO.FillCollection<<#=tabla.Name#>>(DataProvider.Instance().ExecuteReader(
                "<#=proc.Name#>"
                <#=proc.ParamsSinTipoConComaInicial() #>
            ));
        }

<#  }#>
<#foreach (var proc in tabla.ProcsSelectUnRegistro()) 
    {#>
        public <#=tabla.Name#> <#=proc.Nombre#>(<#=proc.ParamsConTipo() #>)
        {
            return CBO.FillObject<<#=tabla.Name#>>(DataProvider.Instance().ExecuteReader(
                "<#=proc.Name#>"
                <#=proc.ParamsSinTipoConComaInicial() #>
            ));
        }

<#  }#>
<#foreach (var proc in tabla.ProcsIUD()) 
    {#>
        public int <#=proc.Nombre#>(<#=tabla.Name#> o)
        {
            try
            {
                return DataProvider.Instance().ExecuteScalar<int>(
                    "<#=proc.Name#>"
                    <#=proc.ParamsSinTipoConComaInicialConPrefijo("o.") #>
                    );
            }
            catch(Exception exc)
            {                
                Exceptions.LogException(exc);
                string mensaje = string.Format("Error en: <#=tabla.Name#>, operacion: <#=proc.Name#>, registro {0}.",o.Id);
                throw new Exception(mensaje, exc);
            }
        }

<#  }#>
<#foreach (var proc in tabla.ProcsOtros()) 
    {#>
        public int <#=proc.Nombre#>(<#=proc.ParamsConTipo() #>)
        {
            try
            {
                return DataProvider.Instance().ExecuteScalar<int>(
                    "<#=proc.Name#>"
                    <#=proc.ParamsSinTipoConComaInicial() #>
                    );
            }
            catch(Exception exc)
            {                
                Exceptions.LogException(exc);
                string mensaje = string.Format("Error en: <#=tabla.Name#>, operacion: <#=proc.Name#>, parámetros. <#=proc.MarcasParaFormatString() #>" <#=proc.ParamsSinTipoConComaInicial() #>);
                throw new Exception(mensaje, exc);
            }
        }

<#  }#>
    }
}