<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ include file="Plantillas\TemplateFilemanager.CS.ttinclude" #>
<#@ output extension=".txt" #>

<#
    var TablaBase                   = "asoPrestamoTmp";
    var namespaceName               = "SetimBasico";
    var connectionString            = @"Data Source=.;Initial Catalog=dnndev.me;Integrated Security=True";
    var schema                      = GetSchema (connectionString);
    var fileManager = TemplateFileManager.Create(this);

    var vTablas = schema
        .SchemaObjects
        .Where (so => ((so.Type == SchemaObject.SchemaObjectType.Table) 
        && (so.Name.Equals(TablaBase))))
        .ToArray ();

    foreach(var vTabla in vTablas)
    {    
        infoTabla iTabla = new infoTabla();
        string Tabla_Nombre             = vTabla.Name; 
        string SP_Prefijo               = "sp_";
        string SP_NombrePrefijo         = SP_Prefijo+Tabla_Nombre+"_";

        // Carga los datos en la tabla
        iTabla.Id = vTabla.Id;
        iTabla.Name = vTabla.Name;
        iTabla.NombreNamespace = namespaceName;
        iTabla.SP_NombrePrefijo = SP_NombrePrefijo;
        // Los nombres para la página tipo View
        iTabla.View_Nombre_ascx = vTabla.Name + "_View.ascx";
        iTabla.View_Nombre_ascx_cs= vTabla.Name + "_View.ascx.cs";
        iTabla.View_ascxCodeBehind = vTabla.Name+"_View.ascx.cs";
        iTabla.View_ascxInherits = "SetimMod_" + vTabla.Name + "." + vTabla.Name + "_View";
        iTabla.View_csNamespace = "SetimMod_" + vTabla.Name;
        iTabla.View_csClase = vTabla.Name + "_View";
        // Los nombres para la página tipo Edit
        iTabla.Edit_Nombre_ascx = vTabla.Name + "_Edit.ascx";
        iTabla.Edit_Nombre_ascx_cs= vTabla.Name + "_Edit.ascx.cs";
        iTabla.Edit_ascxCodeBehind = vTabla.Name+"_Edit.ascx.cs";
        iTabla.Edit_ascxInherits = "SetimMod_" + vTabla.Name + "." + vTabla.Name + "_Edit";
        iTabla.Edit_csNamespace = "SetimMod_" + vTabla.Name;
        iTabla.Edit_csClase = vTabla.Name + "_Edit";
        // Carga las columnas de la tabla
        foreach (var c in vTabla.Columns)
        {
            iTabla.Cols.Add(new infoCol() {
                    Name = c.Name, 
                    CsTypeName= c.CsTypeName.Replace("System.",""),
                    isIdentity = c.IsIdentity,
                    isComputed = c.IsComputed
                    });
        }
        // Busca los SPs en la base asociados a la tabla
        var procs = schema
            .SchemaObjects
            .Where (so => ((so.Type == SchemaObject.SchemaObjectType.StoredProcedure )
            && (so.Name.StartsWith(SP_NombrePrefijo))))
            .ToArray();
        // Carga procesos y parámetros
        foreach (var p in procs)
        {
            infoProc proc = new infoProc();
            proc.Name = p.Name;
            proc.Nombre = p.Name.Replace(SP_NombrePrefijo,"_");
            //proc.Name.Replace(tabla.SP_NombrePrefijo,"_"
            foreach ( var param in p.Parameters)
            {
                proc.Params.Add(new infoCol(){
                        Name = param.Name,
                        CsTypeName = param.CsTypeName.Replace("System.",""),
                        isOutput = param.IsOutput 
                        });
            }
            iTabla.Procs.Add(proc);
        }

        // Graba las clases en archivos        
        fileManager.IsAutoIndentEnabled = true;
        fileManager.CanOverwriteExistingFile = true;
        var paramTmpl = ParamTextTemplate.Create(this.Host); 
        var session = ParamTextTemplate.GetSessionObject();	 
        //Guarda en sesion la tabla
        session["Tabla"] = iTabla;
#>
<# 
        //Generar pagina del tipo View
        fileManager.StartNewFile(iTabla.View_Nombre_ascx, "","ASP_Control");
#>
<%@ Control Language="C#" AutoEventWireup="true" 
    CodeBehind="<#=            iTabla.View_ascxCodeBehind #>" 
    Inherits="<#=            iTabla.View_ascxInherits #>" %>

<%@ Register TagPrefix="dnn" Namespace="DotNetNuke.UI.WebControls" Assembly="DotNetNuke" %>

<ul class="dnnActions dnnClear">
    <li><asp:HyperLink runat="server" ID="addButton" Text="Nuevo" CssClass="dnnPrimaryAction" /></li>
    <li><asp:LinkButton runat="server" ID="btAccion" Text="Accion" CssClass="dnnSecondaryAction confirm" OnClick="btAccion_OnClick" /></li>
</ul>

<asp:Panel runat="server" ID="pnFiltros" CssClass="dnnFormMessage" DefaultButton="btBuscar">
    <div class="dnnClear">
        <asp:Label runat="server" ID="lbFiltro_Criterio" Text="Criterio: "/>
        <asp:TextBox runat="server" ID="tbFiltro_Criterio" Text="" CssClass="TextBox_Setim" />
        <asp:DropDownList runat="server" ID="ddlFiltro_Campo" AutoPostBack="true" CssClass="DropDownList_Setim" OnSelectedIndexChanged="ddlFiltro_Campo_SelectedIndexChanged" />
        <asp:Button runat="server" ID="btBuscar" Text="Buscar" OnClick="btBuscar_Click"  />
    </div>
</asp:Panel>

<asp:Panel runat="server" ID="pnCabecera" CssClass="dnnFormMessage dnnFormSuccess">
    <asp:Label runat="server" ID="lbCab_Estado" Text="Estado: "/>
    <asp:DropDownList runat="server" ID="ddlCab_Estado" AutoPostBack="true" CssClass="DropDownList_Setim" OnSelectedIndexChanged="ddlFiltro_Estado_SelectedIndexChanged"/>
</asp:Panel>

<asp:DataGrid runat="server" ID="dgMaster" 
    CssClass="dnnGrid" AutoGenerateColumns="False" GridLines="None"
    DataKeyField="Id"
    ShowFooter="true"
    AllowPaging="True" AllowCustomPaging="True" AllowSorting="True"
    PagerStyle-NextPageText="Siguiente &gt;" PagerStyle-PrevPageText="&lt; Anterior"     
    OnItemCommand ="dgMaster_OnItemCommand"
    OnSortCommand="dgMaster_SortCommand" 
    OnItemCreated="dgMaster_ItemCreated" >

    <PagerStyle Mode="NextPrev" HorizontalAlign="Left" />
    <headerstyle cssclass="dnnGridHeader" verticalalign="Top"/>
    <itemstyle cssclass="dnnGridItem" horizontalalign="Left" />
    <alternatingitemstyle cssclass="dnnGridAltItem" />
    <edititemstyle cssclass="dnnFormInput" />
    <selecteditemstyle BackColor="#c6dbec"/>
    <footerstyle cssclass="dnnGridFooter" />

    <Columns>   
<#        foreach ( var col in iTabla.Cols) { 
#>      <asp:BoundColumn DataField="<#=col.Name #>" HeaderText="<#=col.Name #>" HeaderStyle-Width="50px" SortExpression="<#=col.Name #>" HeaderStyle-HorizontalAlign="Center" <#
            switch (col.CsTypeName) {   
                case "Int32": 
#>          DataFormatString="{0}" ItemStyle-HorizontalAlign="Right" <#
                    break;
                case "DateTime": 
#>          DataFormatString="{0:d}" ItemStyle-HorizontalAlign="Center" <#
                    break;
                case "Decimal": 
#>          DataFormatString="{0:N2}" ItemStyle-HorizontalAlign="Right" <#
                    break; 
                default: 
#>          DataFormatString="{0}" ItemStyle-HorizontalAlign="Left" <#
                    break;
            } 
#>      />
<#        } #>
      <%--  <asp:ButtonColumn Text="Sel" ButtonType="LinkButton" CommandName="Select" />--%>
        <asp:TemplateColumn>
            <FooterTemplate>
                No de Filas: 
                <asp:DropDownList ID="ddlNoFilasPorPagina" runat="server" CssClass="DropDownList_Setim" AutoPostBack="true" OnSelectedIndexChanged="ddlNoFilasPorPagina_SelectedIndexChanged" >
                    <asp:ListItem Value="10">10</asp:ListItem>
                    <asp:ListItem Value="20">20</asp:ListItem>
                    <asp:ListItem Value="50">50</asp:ListItem>
                </asp:DropDownList>
            </FooterTemplate>
        </asp:TemplateColumn>
        <asp:TemplateColumn>
            <HeaderStyle Width="50px" />
            <ItemTemplate>
                <asp:HyperLink runat="server" ID="Hyperlink1"
                    NavigateUrl='<%# ModuleContext.EditUrl("EntidadId", Eval("Id").ToString(), "Edit") %>'
                    Text="Editar"/>
            </ItemTemplate>
        </asp:TemplateColumn>
        <asp:TemplateColumn>
            <HeaderStyle Width="50px" />
            <ItemTemplate>
                <asp:LinkButton runat="server" ID="LinkButton1"
                    class ="confirm"
                    CommandArgument='<%# Eval("Id") %>'
                    CommandName ="Borrar" 
                    Text="Borrar"/>
            </ItemTemplate>
        </asp:TemplateColumn>
    </Columns>
</asp:DataGrid>

<script type="text/javascript">
    jQuery(function ($) {
        try {
            $('.confirm').dnnConfirm({
                text: '¿Desea proceder con la operación?',
                yestext: 'Si',
                notext: 'No',
                title: 'Confirmación'
            });
        }
        catch (e)
        { }
    });
</script>

<script type="text/javascript">
    $(document).ready(function(){
        $('input[class=TextBox_Setim]').css({ 'margin': '0px', 'padding': '2px' });
        $('select[class=DropDownList_Setim]').css({ 'margin': '0px', 'padding': '2px' });
    })
</script>
<#
        // Generar clase del tipo View
        fileManager.StartNewFile(iTabla.View_Nombre_ascx_cs, "","ASP_Control");
#>
using System;
using System.Linq;
using System.Web.UI.WebControls;
using System.Collections.Generic;
using DotNetNuke.Services.Exceptions;
using DotNetNuke.UI.Skins;
using DotNetNuke.Common;
using DotNetNuke.Framework.JavaScriptLibraries;
using SetimBasico;

namespace <#=iTabla.View_csNamespace #> 
{
    public partial class <#=iTabla.View_csClase #> : SetimModulo
    {
        // Entidad base
        private readonly <#=iTabla.Name #>Control _EntidadControl = new <#=iTabla.Name #>Control();
        // Cada vez que se llama a la página
        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            // Carga el nivel en jerarquía de master/detail 
            this._Nivel = 0;
            // Carga de jQuery
            JavaScript.RequestRegistration(CommonJs.jQuery);
            JavaScript.RequestRegistration(CommonJs.DnnPlugins);
            JavaScript.RequestRegistration(CommonJs.jQueryUI);
            // Datos del módulo y del usuario del DNN
            this._ModuleId = ModuleContext.ModuleId;
            this._UserID = ModuleContext.PortalSettings.UserId;
            // Solo si es primera vez, carga los datos por defecto.
            if (!IsPostBack)
            {
                // Verifica el estado de la página
                if (paginaEstado.ModuleID == this._ModuleId)
                {
                    if (paginaEstado.Ordenar_Campo == "") paginaEstado.Ordenar_Campo = _Ordenar_Campo_Defaul;
                    dgMaster.PageSize = paginaEstado.NoFilasPorPagina;
                    if (paginaEstado.dgMasterItemIndex != -1) dgMaster.SelectedIndex = paginaEstado.dgMasterItemIndex;
                }
                else
                {
                    // Si no se trata del estado de esta página, se inicializa todo el estado
                    paginaEstado = new PaginaEstado();
                    paginaEstado.ModuleID = this._ModuleId;
                    paginaEstado.Ordenar_Campo = this._Ordenar_Campo_Defaul;
                }
                // Inicializa la lista de estados en el filtro
                CargarDdl_CamposDelFiltro();
                CargarDdl_Estados();
                // Carga de datos
                ConsultaDatos();
            }
            // Inicializa el botón de edición
            addButton.NavigateUrl = ModuleContext.EditUrl("Edit");
        }
        // Proceso de carga de datos en el GridView
        protected void ConsultaDatos()
        {
            // Consulta los datos del SP SelByAll
            var datos = ConsultaSP();
            // Calcula la página que el toca en el datagrid
            int noDatos = datos.Count();
            if (noDatos > 0 || (noDatos == 0 && paginaEstado.PaginaActual == 0))
            {
                dgMaster.VirtualItemCount = noDatos < paginaEstado.NoFilasPorPagina ?
                      (paginaEstado.PaginaActual) * paginaEstado.NoFilasPorPagina + noDatos
                    : (paginaEstado.PaginaActual + 2) * paginaEstado.NoFilasPorPagina;
                dgMaster.CurrentPageIndex = paginaEstado.PaginaActual;
                dgMaster.PageSize = paginaEstado.NoFilasPorPagina;
                // Coloca los datos en el grid
                dgMaster.DataSource = datos;
                dgMaster.DataBind();
                // Accede al Footer del DataGrid y pone el número de registros por página
                int NoRegs = dgMaster.Controls[0].Controls.Count;
                var footer = (DataGridItem)dgMaster.Controls[0].Controls[NoRegs - 2];
                var ddlNoFilasPorPagina = (DropDownList)(footer.FindControl("ddlNoFilasPorPagina"));
                ddlNoFilasPorPagina.SelectedValue = dgMaster.PageSize.ToString();
            }
        }
        // Proceso para consultar a la base los datos
        private IList<<#=iTabla.Name #>> ConsultaSP()
        {
            IList<<#=iTabla.Name #>> res = new List<<#=iTabla.Name #>>();
            // En caso de filtrar por estado, utilizar paginaEstado.Filtro_Estado
            res = _EntidadControl._0SelByAll(
                paginaEstadoMaster.Master_Id,
                paginaEstado.Filtro_Campo, paginaEstado.Filtro_Valor,
                paginaEstado.PaginaActual, paginaEstado.NoFilasPorPagina,
                paginaEstado.Ordenar_Campo, paginaEstado.Ordenar_Sentido);
            return res;
        }
        // Proceso de borrado de la fila
        protected void BorrarEntidad(int entidadId)
        {
            try
            {
                var oSocio = _EntidadControl._1SelById(entidadId);
                int res = _EntidadControl._4Del(oSocio);
                Response.Redirect(Request.RawUrl, false);
                Context.ApplicationInstance.CompleteRequest();
            }
            catch (Exception exc)
            {
                Exceptions.LogException(exc);
                const string headerText = "Error";
                const string messageText = "Al borrar hay error. Mire en el visor.";
                Skin.AddModuleMessage(this,
                    headerText,
                    messageText,
                    DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType.YellowWarning);
            }
        }
        // Organiza los comandos generados por el DataGrid
        protected void dgMaster_OnItemCommand(object source, DataGridCommandEventArgs e)
        {
            int entidadId;
            switch (e.CommandName)
            {
                case "Borrar":
                    entidadId = int.Parse((string)e.CommandArgument);
                    BorrarEntidad(entidadId);
                    break;
                case "Page":
                    // recibe de argumento: Next o Prev y lo traduce en el índice de la nueva página
                    string dir = (string)e.CommandArgument;
                    int indice = ((DataGrid)source).CurrentPageIndex;
                    if (dir == "Next")
                        indice = indice + 1;
                    else
                        indice = indice - 1;
                    paginaEstado.PaginaActual = indice;
                    ConsultaDatos();
                    break;
                case "Select":
                    paginaEstado.dgMasterItemIndex = e.Item.ItemIndex;
                    string sEntidadId = e.Item.Cells[0].Text;
                    paginaEstado.Master_Id = Int32.Parse(sEntidadId);
                    break;
            }
        }
        protected void dgMaster_SortCommand(object source, DataGridSortCommandEventArgs e)
        {

            if (paginaEstado.Ordenar_Campo == e.SortExpression)
                paginaEstado.Ordenar_Sentido = paginaEstado.Ordenar_Sentido == "ASC" ? "DESC" : "ASC";
            else
            {
                paginaEstado.Ordenar_Campo = e.SortExpression;
                paginaEstado.Ordenar_Sentido = "ASC";
            }
            // Consulta los datos
            ConsultaDatos();
        }
        protected void dgMaster_ItemCreated(object sender, DataGridItemEventArgs e)
        {
            if (e.Item.ItemType == ListItemType.Footer)
            {
                e.Item.Cells[0].ColumnSpan = 2;
                e.Item.Cells[0].Text = string.Format("Página No: {0}", dgMaster.CurrentPageIndex + 1);
                e.Item.Cells[e.Item.Cells.Count - 3].ColumnSpan = 2;
                e.Item.Cells.RemoveAt(e.Item.Cells.Count - 1);
                e.Item.Cells.RemoveAt(e.Item.Cells.Count - 1);
            }
        }
        protected void ddlNoFilasPorPagina_SelectedIndexChanged(object sender, EventArgs e)
        {
            int noFilasPorPagina = int.Parse(((DropDownList)sender).SelectedValue.ToString());
            paginaEstado.NoFilasPorPagina = noFilasPorPagina;
            paginaEstado.PaginaActual = 0;
            ConsultaDatos();
        }
        // Eventos de los filtros
        protected void ddlFiltro_Estado_SelectedIndexChanged(object sender, EventArgs e)
        {
            var ddl = (DropDownList)sender;
            paginaEstado.Filtro_Estado = ddl.SelectedValue == "TOD" ? null : ddl.SelectedValue;
            paginaEstado.PaginaActual = 0;
            ConsultaDatos();
        }
        protected void ddlFiltro_Campo_SelectedIndexChanged(object sender, EventArgs e)
        {
            var ddl = (DropDownList)sender;
            paginaEstado.Filtro_Campo = ddl.SelectedValue == "TOD" ? null : ddl.SelectedValue;
            paginaEstado.Filtro_Valor = tbFiltro_Criterio.Text;
            paginaEstado.PaginaActual = 0;
            ConsultaDatos();
        }
        protected void btBuscar_Click(object sender, EventArgs e)
        {
            ddlFiltro_Campo_SelectedIndexChanged(ddlFiltro_Campo, e);
        }
        // Carga los estados desde una lista 
        private void CargarDdl_Estados()
        {
            asoSetimListaDetControl SetimLista = new asoSetimListaDetControl();
            var lista = SetimLista._0SelBy_asoSetimLista_Nombre("<#=iTabla.Name #>_Estado");
            ddlCab_Estado.DataSource = lista;
            ddlCab_Estado.DataTextField = "Texto";
            ddlCab_Estado.DataValueField = "Valor";
            ddlCab_Estado.DataBind();
            // Carga el estado del estado de la pagina
            ddlCab_Estado.SelectedValue = paginaEstado.Filtro_Estado ?? "TOD";
        }
        // Carga los campos para filtrar 
        private void CargarDdl_CamposDelFiltro()
        {
            asoSetimListaDetControl SetimLista = new asoSetimListaDetControl();
            var lista = SetimLista._0SelBy_asoSetimLista_Nombre("<#=iTabla.Name #>_Filtro_Campos");
            ddlFiltro_Campo.DataSource = lista;
            ddlFiltro_Campo.DataTextField = "Texto";
            ddlFiltro_Campo.DataValueField = "Valor";
            ddlFiltro_Campo.DataBind();
            // Carga el filtro de los campos desde el estado de la pagina
            ddlFiltro_Campo.SelectedValue = paginaEstado.Filtro_Campo ?? "TOD";
            tbFiltro_Criterio.Text = paginaEstado.Filtro_Campo == null ? "" : paginaEstado.Filtro_Valor.ToString(); //Posible problema cuando no sea un string sino un int, decimal o fecha
        }
        // Boton para ejecutar una acción
        protected void btAccion_OnClick(object sender, EventArgs e)
        {
            //try
            //{
            //    _EntidadControl._5CopyFromUsers();
            //    Response.Redirect(Request.RawUrl, false);
            //    Context.ApplicationInstance.CompleteRequest();
            //}
            //catch (Exception exc)
            //{
            //    Exceptions.LogException(exc);
            //    const string headerText = "Error";
            //    const string messageText = "Al copiar los usuarios hay error. <br/> Mire en el visor.";
            //    Skin.AddModuleMessage(this,
            //        headerText,
            //        messageText,
            //        DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType.YellowWarning);
            //}
        }
        // Boton para ejecutar una accion
        protected void btConfigAportes_OnClick(object sender, EventArgs e)
        {
            int vId = (int)dgMaster.DataKeys[dgMaster.SelectedIndex];
            string url = Globals.NavigateURL(ModuleContext.PortalSettings.ActiveTab.TabID, "Edit", "mid", ModuleContext.ModuleId.ToString(), "EntidadId", vId.ToString());
            Response.Redirect(url + "?popUp=true");
        }
    }
}
<#
        // Generar pantalla del tipo Edit
        fileManager.StartNewFile(iTabla.Edit_Nombre_ascx, "","ASP_Control");
#>
<%@ Control Language="C#" AutoEventWireup="true" CodeBehind="<#=iTabla.Edit_ascxCodeBehind #>" Inherits="<#=iTabla.Edit_ascxInherits #>" %>

    <%@ Register Assembly="DotNetNuke.WebControls" Namespace="DotNetNuke.UI.WebControls" TagPrefix="DNN" %>
    <%@ Register TagPrefix="dnn" TagName="Label" Src= "~/controls/LabelControl.ascx" %>
    <%@ Register TagPrefix="dnn" Namespace="DotNetNuke.Web.UI.WebControls" Assembly="DotNetNuke.Web" %>
    <%@ Register TagPrefix="dnn" Namespace="DotNetNuke.UI.WebControls" Assembly="DotNetNuke" %>
    <%@ Register TagPrefix="telerik" Namespace="Telerik.Web.UI" Assembly="Telerik.Web.UI" %>

<%--Funcion para poner el formato numérico a los campos de Valor--%>
<script src="http://asoimpq.org/dnn/Resources/Shared/scripts/autoNumeric-2.0-Beta.js" type="text/javascript"></script>
<script type="text/javascript">
    jQuery(function ($) {
        $('input[class=TextBox_Setim_Valor]').autoNumeric('init', { aSep: '.', aDec: ',' });
    });
</script>
<%--Formulario de datos --%>
<div id="dnnUsers" class="dnnForm dnnClear">
    <asp:Label ID="lbTitulo" runat="server" CssClass="dnnFormMessage dnnFormInfo" Text="Formulario para actualizar datos." />
    <fieldset>
        <legend></legend>
<# 
        foreach(var col in iTabla.Cols)
        {
            switch (col.CsTypeName)
            {
#>
<#              case "Int32": #>
        <div class="dnnFormItem">
            <dnn:Label runat="server" ID="lb<#=col.Name #>" Text="<#=col.Name #>:" HelpText="<#=col.Name #>"/>
            <asp:TextBox runat="server" ID="tb<#=col.Name #>" Enabled="true"/>
            <asp:RequiredFieldValidator ID="rfv_tb<#=col.Name #>" runat="server" ControlToValidate="tb<#=col.Name #>" CssClass="dnnFormMessage dnnFormError" Text="Requerido" ErrorMessage="Falta <#=col.Name #>"  SetFocusOnError="true" />
        </div>
<#                  break; 
                case "String": 
                    if (col.Name.Contains("Descripcion")) {#>              
        <div class="dnnFormItem">
            <dnn:Label runat="server" ID="lb<#=col.Name #>" Text="<#=col.Name #>:" HelpText="<#=col.Name #>"/>
            <asp:TextBox runat="server" ID="tb<#=col.Name #>"  TextMode="MultiLine" />
        </div>
<#                  } else
                        if (col.Name.Contains("Estado") || col.Name.Contains("Tipo")) { #>
        <div class="dnnFormItem">
            <dnn:Label ID="lb<#=col.Name #>" runat="server" Text="<#=col.Name #>:"/>
            <asp:DropDownList runat="server" ID="ddl<#=col.Name #>" />
        </div>
<#                    } else { #>
        <div class="dnnFormItem">
            <dnn:Label runat="server" ID="lb<#=col.Name #>" Text="<#=col.Name #>:" HelpText="<#=col.Name #>"/>
            <asp:TextBox runat="server" ID="tb<#=col.Name #>" />
            <asp:RequiredFieldValidator ID="rfv_tb<#=col.Name #>" runat="server" ControlToValidate="tb<#=col.Name #>" CssClass="dnnFormMessage dnnFormError" Text="Requerido" ErrorMessage="Falta <#=col.Name #>"  SetFocusOnError="true" />
        </div>
<#                    } 
                    break; 
                case "DateTime": #>
        <div class="dnnFormItem">
            <dnn:Label ID="lb<#=col.Name #>" runat="server" CssClass="dnnFormLabel" AssociatedControlID="dnnDP_<#=col.Name #>" Text="<#=col.Name #>" />
            <dnn:DnnDatePicker runat="server" CssClass="dnnFormInput" ID="dnnDP_<#=col.Name #>" />
            <asp:RequiredFieldValidator ID="rfv_dnnDP_<#=col.Name #>" runat="server" ControlToValidate="dnnDP_<#=col.Name #>" CssClass="dnnFormMessage dnnFormError" Text="Requerido" ErrorMessage="Falta <#=col.Name #>"  SetFocusOnError="true" />
        </div>
<#                  break; 
                case "Decimal": #>
        <div class="dnnFormItem" >
            <dnn:Label ID="lb<#=col.Name #>" runat="server" Text="<#=col.Name #>:" HelpText="<#=col.Name #>"/>
            <asp:TextBox runat="server" ID="tb<#=col.Name #>" CssClass="TextBox_Setim_Valor" />
            <asp:RequiredFieldValidator ID="rfv_<#=col.Name #>" runat="server" ControlToValidate="tb<#=col.Name #>" CssClass="dnnFormMessage dnnFormError" Text="Requerido" ErrorMessage="Falta <#=col.Name #>"  SetFocusOnError="true" />
        </div>
<#                    break;
            } }
#>
    </fieldset>
    <asp:ValidationSummary runat="server" ID="vsResumen" CssClass="dnnFormMessage dnnFormValidationSummary"/>
</div>
<%--Botones --%>
<ul class="dnnActions dnnClear">
    <li><asp:LinkButton runat="server" ID="saveButton" CssClass="dnnPrimaryAction" OnClick="Guardar" Text="Guardar"/></li>
    <li><asp:LinkButton runat="server" ID="cancelButton" CssClass="dnnSecondaryAction" OnClick="Cancelar" Text="Cancelar"  CausesValidation="false" /> </li>
</ul>
<#
        // Generar la clase base de la pantalla del tipo Edit
        fileManager.StartNewFile(iTabla.Edit_Nombre_ascx_cs, "","ASP_Control");
#>
using System;
using DotNetNuke.Common;
using DotNetNuke.UI.Modules;
using DotNetNuke.Collections;
using SetimBasico;

namespace SetimMod_<#=iTabla.Name #>
{
    public partial class <#=iTabla.Name #>_Edit : SetimModulo
    {
        private readonly <#=iTabla.Name #>Control _EntidadControl = new <#=iTabla.Name #>Control();

        protected override void OnLoad(EventArgs e)
        {
            base.OnLoad(e);
            this._Nivel = 0;
            this._UserID = ModuleContext.PortalSettings.UserId;
            this._EntidadId = Request.QueryString.GetValueOrDefault("EntidadId", -1);
            if (!IsPostBack)
            {
                CargarDdl_Estados();
                CargarDdl_Tipos();
                ColocarDatosEnFormulario();
            }
        }
        // Guardar o actualizar dependiendo del parámetro de llamada a la pantalla
        protected void Guardar(object sender, EventArgs e)
        {
            var o = ColocarDatosEnObjeto();

            if (_EntidadId == -1)
                _EntidadControl._2Ins(o);
            else
                _EntidadControl._3Upd(o);

            string url = Globals.NavigateURL();
            if (this._Nivel != 0)
                url = string.Format("{0}/mid/{1}?popUp=true", Globals.NavigateURL("DetView"), ModuleContext.ModuleId);
            Response.Redirect(url);
        }
        // Cancela y regresa a la pantalla base
        protected void Cancelar(object sender, EventArgs e)
        {
            string url = Globals.NavigateURL();
            if (this._Nivel != 0)
                url = string.Format("{0}/mid/{1}?popUp=true", Globals.NavigateURL("DetView"), ModuleContext.ModuleId);
            Response.Redirect(url);
        }
        // Carga el formulario con los datos de un objeto
        protected void ColocarDatosEnFormulario()
        {
            if (_EntidadId == -1)
            {
                // Valores por defecto para el INSERT
                // Usar this.paginaEstadoMaster.Master_Id.ToString() para la clave foranea
<# 
        foreach(var col in iTabla.Cols)
        {
            switch (col.CsTypeName)
            {
                case "String":
                    if (col.Name.Contains("Estado") || col.Name.Contains("Tipo")) {#>
            ddl<#=col.Name #>.SelectedValue = "Seleccione..."; // Cambiar por el <#=col.Name #> inicial
<#                    } 
                    else { #>
            tb<#=col.Name #>.Text = "<#=col.Name #>";            
<#                    }
                    break;
                case "DateTime" :
#>
            dnnDP_<#=col.Name #>.SelectedDate = DateTime.Today ; // Fecha actual por defecto
<#                    break;
                default : #>
            tb<#=col.Name #>.Text = "0";
<#                    break;
            }
        }#>       
            }
            else
            {
                // Consulta los datos de la entidad
                var o = _EntidadControl._1SelById(this._EntidadId);
                // Pone en los campos los valores del objeto
<# 
        foreach(var col in iTabla.Cols)
        {
            switch (col.CsTypeName)
            {
                case "String":
                    if (col.Name.Contains("Estado") || col.Name.Contains("Tipo")) {#>
            ddl<#=col.Name #>.SelectedValue = o.<#=col.Name #>;
<#                    } 
                    else { #>
            tb<#=col.Name #>.Text = o.<#=col.Name #>;            
<#                    }
                    break;
                case "DateTime" :
#>
            dnnDP_<#=col.Name #>.SelectedDate = o.<#=col.Name #>;
<#                    break;
                default : #>
            tb<#=col.Name #>.Text = o.<#=col.Name #>.ToString();
<#                    break;
            }
        }#>       
            }     
        }
        // Carga un objeto con los datos del formulario
        protected <#=iTabla.Name #> ColocarDatosEnObjeto()
        {
            var o = new <#=iTabla.Name #>();
<# 
        foreach(var col in iTabla.Cols)
        {
            switch (col.CsTypeName)
            {
                case "Decimal":
#>
            o.<#=col.Name #> = string.IsNullOrWhiteSpace(tb<#=col.Name #>.Text) ? 0 : decimal.Parse(tb<#=col.Name #>.Text);
<#
                    break;
                case "String":
                    if (col.Name.Contains("Estado") || col.Name.Contains("Tipo")) {#>
            o.<#=col.Name #> = ddl<#=col.Name #>.SelectedValue;
<#                    } 
                    else { #>
            o.<#=col.Name #> = tb<#=col.Name #>.Text;
<#                    }
                    break;
                case "DateTime" :
#>
            o.<#=col.Name #> = (DateTime)dnnDP_<#=col.Name #>.SelectedDate;
<#                    break;
                case "Int32" : 
                    if (col.Name == "Id") {#>
            o.Id = _EntidadId;
<#                    } 
                    else {#>
            o.<#=col.Name #> = Int32.Parse(tb<#=col.Name #>.Text);
<#                    }
                    break;
            }
        }#>     
            return o;
        }
        // Carga los estados desde una lista 
        private void CargarDdl_Estados()
        {
            asoSetimListaDetControl SetimLista = new asoSetimListaDetControl();
            var lista = SetimLista._0SelBy_asoSetimLista_Nombre("<#=iTabla.Name #>_Estado");
            lista.RemoveAt(0);
            ddlEstado.DataSource = lista;
            ddlEstado.DataTextField = "Texto";
            ddlEstado.DataValueField = "Valor";
            ddlEstado.DataBind();
        }
        // Carga los Tipos desde una lista 
        private void CargarDdl_Tipos()
        {
            asoSetimListaDetControl SetimLista = new asoSetimListaDetControl();
            var lista = SetimLista._0SelBy_asoSetimLista_Nombre("<#=iTabla.Name #>_Tipo");
            lista.RemoveAt(0);
            ddlTipo.DataSource = lista;
            ddlTipo.DataTextField = "Texto";
            ddlTipo.DataValueField = "Valor";
            ddlTipo.DataBind();
        }
    }
}
<#
    }
    // Guardar
    fileManager.Process();
#>
<#+
    static Schema GetSchema (string connectionString) 
    {
        using (var connection = new SqlConnection (connectionString))
        {
            connection.Open ();
            return new Schema (connection);
        }
    }
    /// <summary>
    /// Información para tablas
    /// </summery>
    [Serializable()]
    public class infoTabla : MarshalByRefObject
    {
        public string NombreNamespace{ get; set; }
        public string View_Nombre_ascx { get; set; }
        public string View_Nombre_ascx_cs { get; set; }
        public string View_ascxInherits {get;set;}
        public string View_ascxCodeBehind {get ; set;}
        public string View_csNamespace {get; set;}
        public string View_csClase {get; set;}

        public string Edit_Nombre_ascx { get; set; }
        public string Edit_Nombre_ascx_cs { get; set; }
        public string Edit_ascxInherits {get;set;}
        public string Edit_ascxCodeBehind {get ; set;}
        public string Edit_csNamespace {get; set;}
        public string Edit_csClase {get; set;}

        public string SP_NombrePrefijo { get; set; }
        public int Id{ get; set; }
        public string Name { get; set; }
        public List<infoCol> Cols{ get; set; }
        public List<infoProc> Procs{ get; set; }
        public infoTabla()
        {
            Name = "..";
            Cols = Cols ?? new List<infoCol>();
            Procs = Procs ?? new List<infoProc>();
        }
        public List<infoProc> ProcsSelectVariosRegistros()
        {
            List<infoProc> res = new List<infoProc>();
            res = Procs.FindAll(p => (p.Name).Contains("_0Sel"));
            res.RemoveAll(p =>(p.Name).EndsWith("_0SelByAll"));
            return res;
        }
        public List<infoProc> ProcsSelectByAll()
        {
            List<infoProc> res = new List<infoProc>();
            res = Procs.FindAll(p => (p.Name).EndsWith("_0SelByAll"));
            return res;
        }
        public List<infoProc> ProcsSelectUnRegistro()
        {
            List<infoProc> res = new List<infoProc>();
            res = Procs.FindAll(p => (p.Name).Contains("_1Sel"));
            return res;
        }
        public List<infoProc> ProcsIUD()
        {
            List<infoProc> res = new List<infoProc>();
            res = Procs.FindAll(p => (
                (p.Name.EndsWith("_2Ins")) ||
                (p.Name.EndsWith("_3Upd")) ||
                (p.Name.EndsWith("_4Del")) 
                ));
            return res;
        }
        public List<infoProc> ProcsOtros()
        {
            List<infoProc> res = new List<infoProc>();
            res = Procs.FindAll(p => (p.Name).Contains("_5"));
            return res;
        }
    }
    /// <summary>
    /// Información para Procedimientos
    /// </summery>
    [Serializable()]
    public class infoProc : MarshalByRefObject
    {
        public int Id{ get; set; }
        public string Name{ get; set; }
        public string Nombre{ get; set; }
        public List<infoCol> Params{ get; set; }
        public infoProc()
        {
            Name = "..";
            Params = Params ?? new List<infoCol>();
        }
        public string ParamsConTipo()
        {
            string lista="";
            foreach(var p in Params)
            {
                lista = string.Format("{0},{1} {2}",lista,p.CsTypeName, p.Name.Replace("@",""));
            }
            return string.IsNullOrEmpty(lista)?"":lista.Remove(0,1);
        }
        public string ParamsSinTipoConComaInicial()
        {
            string lista="";
            foreach(var p in Params)
            {
                lista = string.Format("{0},{1}",lista,p.Name.Replace("@",""));
            }
            return lista;
        }
        public string ParamsSinTipoConComaInicialConPrefijo(string prefijo)
        {
            string lista="";
            foreach(var p in Params)
            {
                lista = string.Format("{0},{1}{2}",lista,prefijo,p.Name.Replace("@",""));
            }
            return lista;
        }
        public string MarcasParaFormatString()
        {
            string marcas="";
            int i = 0;
            foreach(var p in Params)
            {
                marcas = marcas + p.Name.Replace("@","") + ":> {" + i.ToString() + "}";
                i = i + 1;
            }
            return marcas;
        }
    }
    /// <summary>
    /// Información para columnas y parametros
    /// </summery>
    [Serializable()]
    public class infoCol : MarshalByRefObject
    {
        public int Id{ get; set; }
        public string Name{ get; set; }
    
        public string DbTypeName{ get; set; }
        public string CsTypeName{ get; set; }
        public string DbDefaultValue{ get; set; }
    
        public short MaxLength{ get; set; }
        public byte Precision{ get; set; }
        public byte Scale{ get; set; }

        public bool isOutput{ get; set; }
        public bool isIdentity { get; set; }
        public bool isNullable { get; set; }
        public bool isComputed { get; set; }
    }
#>