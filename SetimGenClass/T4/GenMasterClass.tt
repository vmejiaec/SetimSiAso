<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ include file="Plantillas\TemplateFilemanager.CS.ttinclude" #>
<#@ output extension=".txt" #>
<#
    // The namespace surrounding the code
    var namespaceName               = "SetimBasico";
    var connectionString            = @"Data Source=.;Initial Catalog=dnndev.me;Integrated Security=True";
    var schema                      = GetSchema (connectionString);
    var fileManager = TemplateFileManager.Create(this);

    var vTablas = schema
        .SchemaObjects
        .Where (so => ((so.Type == SchemaObject.SchemaObjectType.Table) 
            && (so.Name.Equals("asoParametro"))))
        .ToArray ();

    foreach(var vTabla in vTablas)
    {    
        infoTabla iTabla = new infoTabla();
        string Tabla_Nombre             = vTabla.Name;
        string SP_Prefijo               = "sp_";
        string SP_NombrePrefijo         = SP_Prefijo+Tabla_Nombre+"_";

            // Carga los datos en la tabla
            iTabla.Id = vTabla.Id;
            iTabla.Name = vTabla.Name;
            iTabla.NombreEntidad = vTabla.Name + ".cs";
            iTabla.NombreControl= vTabla.Name + "Control.cs";
            iTabla.NombreNamespace = namespaceName;
            iTabla.SP_NombrePrefijo = SP_NombrePrefijo;
            // Carga las columnas de la tabla
            foreach (var c in vTabla.Columns)
            {
                iTabla.Cols.Add(new infoCol() {
                        Name = c.Name, 
                        CsTypeName= c.CsTypeName.Replace("System.",""),
                        isIdentity = c.IsIdentity,
                        isComputed = c.IsComputed
                        });
            }
            // Busca los SPs en la base asociados a la tabla
            var procs = schema
                .SchemaObjects
                .Where (so => ((so.Type == SchemaObject.SchemaObjectType.StoredProcedure )
                && (so.Name.StartsWith(SP_NombrePrefijo))))
                .ToArray();
            // Carga procesos y parámetros
            foreach (var p in procs)
            {
                infoProc proc = new infoProc();
                proc.Name = p.Name;
                proc.Nombre = p.Name.Replace(SP_NombrePrefijo,"_");
                //proc.Name.Replace(tabla.SP_NombrePrefijo,"_"
                foreach ( var param in p.Parameters)
                {
                    proc.Params.Add(new infoCol(){
                            Name = param.Name,
                            CsTypeName = param.CsTypeName.Replace("System.",""),
                            isOutput = param.IsOutput 
                            });
                }
                iTabla.Procs.Add(proc);
            }

        // Graba las clases en archivos        
        fileManager.IsAutoIndentEnabled = true;
        fileManager.CanOverwriteExistingFile = true;
        var paramTmpl = ParamTextTemplate.Create(this.Host); 
        var session = ParamTextTemplate.GetSessionObject();	 
        //Guarda en sesion la tabla
        session["Tabla"] = iTabla;
        //Generar clase entidad
        fileManager.StartNewFile(iTabla.NombreEntidad, "","Modelos");
        string outputEntidad = paramTmpl.TransformText("GenClassEntidad.tt", session);
        this.Write(outputEntidad);
        // Generar clase de control
        fileManager.StartNewFile(iTabla.NombreControl, "","Modelos");
        string outputControl = paramTmpl.TransformText("GenClassControl.tt", session);
        this.Write(outputControl);
        // Generar clase extencion
        fileManager.StartNewFile("ext_" + iTabla.NombreControl, "","Modelos");
        string outputControExt = paramTmpl.TransformText("GenClassControlExtendida.tt", session);
        this.Write(outputControExt);
    }
    // Guardar
    fileManager.Process();
#>
<#+
    static Schema GetSchema (string connectionString) 
    {
        using (var connection = new SqlConnection (connectionString))
        {
            connection.Open ();
            return new Schema (connection);
        }
    }
    /// <summary>
    /// Información para tablas
    /// </summery>
    [Serializable()]
    public class infoTabla : MarshalByRefObject
    {
        public string NombreNamespace{ get; set; }
        public string NombreEntidad{ get; set; }
        public string NombreControl { get; set; }
        public string SP_NombrePrefijo { get; set; }
        public int Id{ get; set; }
	    public string Name { get; set; }
	    public List<infoCol> Cols{ get; set; }
        public List<infoProc> Procs{ get; set; }
        public infoTabla()
        {
            Name = "..";
            Cols = Cols ?? new List<infoCol>();
            Procs = Procs ?? new List<infoProc>();
        }
        public List<infoProc> ProcsSelectVariosRegistros()
        {
            List<infoProc> res = new List<infoProc>();
            res = Procs.FindAll(p => (p.Name).Contains("_0Sel"));
            res.RemoveAll(p =>(p.Name).EndsWith("_0SelByAll"));
            return res;
        }
        public List<infoProc> ProcsSelectByAll()
        {
            List<infoProc> res = new List<infoProc>();
            res = Procs.FindAll(p => (p.Name).EndsWith("_0SelByAll"));
            return res;
        }
        public List<infoProc> ProcsSelectUnRegistro()
        {
            List<infoProc> res = new List<infoProc>();
            res = Procs.FindAll(p => (p.Name).Contains("_1Sel"));
            return res;
        }
        public List<infoProc> ProcsIUD()
        {
            List<infoProc> res = new List<infoProc>();
            res = Procs.FindAll(p => (
                (p.Name.EndsWith("_2Ins")) ||
                (p.Name.EndsWith("_3Upd")) ||
                (p.Name.EndsWith("_4Del")) 
                ));
            return res;
        }
        public List<infoProc> ProcsOtros()
        {
            List<infoProc> res = new List<infoProc>();
            res = Procs.FindAll(p => (p.Name).Contains("_5"));
            return res;
        }
    }
    /// <summary>
    /// Información para Procedimientos
    /// </summery>
    [Serializable()]
    public class infoProc : MarshalByRefObject
    {
        public int Id{ get; set; }
        public string Name{ get; set; }
        public string Nombre{ get; set; }
        public List<infoCol> Params{ get; set; }
        public infoProc()
        {
            Name = "..";
            Params = Params ?? new List<infoCol>();
        }
        public string ParamsConTipo()
        {
            string lista="";
            foreach(var p in Params)
            {
                lista = string.Format("{0},{1} {2}",lista,p.CsTypeName, p.Name.Replace("@",""));
            }
            return string.IsNullOrEmpty(lista)?"":lista.Remove(0,1);
        }
        public string ParamsSinTipoConComaInicial()
        {
            string lista="";
            foreach(var p in Params)
            {
                lista = string.Format("{0},{1}",lista,p.Name.Replace("@",""));
            }
            return lista;
        }
        public string ParamsSinTipoConComaInicialConPrefijo(string prefijo)
        {
            string lista="";
            foreach(var p in Params)
            {
                lista = string.Format("{0},{1}{2}",lista,prefijo,p.Name.Replace("@",""));
            }
            return lista;
        }
        public string MarcasParaFormatString()
        {
            string marcas="";
            int i = 0;
            foreach(var p in Params)
            {
                marcas = marcas + p.Name.Replace("@","") + ":> {" + i.ToString() + "}";
                i = i + 1;
            }
            return marcas;
        }
    }
    /// <summary>
    /// Información para columnas y parametros
    /// </summery>
    [Serializable()]
    public class infoCol : MarshalByRefObject
    {
        public int Id{ get; set; }
        public string Name{ get; set; }
    
        public string DbTypeName{ get; set; }
        public string CsTypeName{ get; set; }
        public string DbDefaultValue{ get; set; }
    
        public short MaxLength{ get; set; }
        public byte Precision{ get; set; }
        public byte Scale{ get; set; }

        public bool isOutput{ get; set; }
        public bool isIdentity { get; set; }
        public bool isNullable { get; set; }
        public bool isComputed { get; set; }
    }
#>
<#+ 
    /// <summary>
    /// DTO definitions for parameter template
    /// </summery>
    [Serializable]
    public class Person : MarshalByRefObject
    {
	    public string Name { get; set; }
	    public string CsTypeName { get; set; }
    }
#>